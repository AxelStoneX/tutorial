#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <errno.h>
#include <dirent.h>
#include <limits.h>
#include <string.h>
#include <sys/iofunc.h>
#include <sys/dispatch.h>

#define ALIGN(x)  ((x) + 3) & ~3)
#define NUM_ENTS   26

static iofunc_attr_t  atoz_attrs [NUM_ENTS];

static int my_open (resmgr_context_t *ctp, io_open_t *msg,
                    iofunc_attr_t *attr, void *extra);

int main (int argc, char **argv)
{
    dispatch_t               *dpp;
    resmgr_attr_t            resmgr_attr;
    resmgr_context_t         *ctp;
    resmgr_connect_funcs_t   connect_func;
    resmgr_io_funcs_t        io_func;
    iofunc_attr_t            attr;
    int                      i;

    // Создать структуру диспетчеризации
    if ((dpp = dispatch_create ()) == NULL)
    {
        perror ("Ошибка dispatch_create\n");
        exit (EXIT_FAILURE);
    }

    // Инициализировать структуры данных
    memset (&resmgr_attr, 0, sizeof (resmgr_attr));
    resmgr_attr.nparts_max = 1;
    resmgr_attr.msg_max_size = 2048;

    // Назначить обработчики по умолчанию
    iofunc_func_init (_RESMGR_CONNECT_NFUNCS, &connect_func,
                      _RESMGR_IO_NFUNCS, &io_func);

    // Создать и инициализировать атрибутную запись для каталога ...
    iofunc_attr_init (&attr, S_IFDIR | 0555, 0, 0);
    attr.inode = NUM_ENTS + 1; // 1-26 зарезервированы для файлов от "a" до "z"
    attr.nbytes = NUM_ENTS;

    // И для имен от "a" до "z"
    for (i = 0; i < NUM_ENTS; i++)
    {
        iofunc_attr_init (&atoz_attrs [i], S_IFREG | 0444, 0, 0);
        atoz_attrs[i].inode = i + 1;
        atoz_attrs[i].nbytes = 1;
    }

    // Добавить наши функции; Нам интересны только io_open и io_read
    connect_func.open = my_open;
    io_func.read = my_read;

    // Зарегестрировать префикс
    if (resmgr_attach (dpp, &resmgr_attr, "/dev/atoz",
                       _FTYPE_ANY, _RESMGR_FLAG_DIR, &connect_func, &io_func, &attr) == -1)
    {
        perror ("Ошибка resmgr_attach\n");
        exit (EXIT_FAILURE);
    }

    // Выделить контекст
    ctp = resmgr_context_alloc (dpp);

    // Ждать сообщений в вечном цикле
    while (1)
    {
        if ((ctp = resmgr_block (ctp)) == NULL)
        {
            perror ("Ошибка resmgr_block\n");
            exit (EXIT_FAILURE);
        }
        resmgr_handler (ctp);
    }
}


static int my_open (resmgr_context_t *ctp, io_open_t *msg,
                    iofunc_attr_t *attr, void *extra)
{
    if (msg -> connect.path [0] == 0)   // Это каталог /dev/atoz
    {
        return (iofunc_open_default (ctp, msg, attr, extra));
    } else if ( (msg -> connect.path[1]) == 0   &&
               ((msg->connect.path[0] >= 'a') &&
                msg -> connect.path[0] <= 'z')   )
    {
        return (iofunc_open_default (ctp, msg, atoz_attrs + msg->connect.path[0] - 'a', extra));
    } else
    {
        return (ENOENT);
    }
}
